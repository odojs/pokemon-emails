// Generated by CoffeeScript 1.7.1
(function() {
  var config, deliveremail, display, server, simplesmtp, stream,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  simplesmtp = require('simplesmtp');

  stream = require('stream');

  require('colors');

  config = require('./config.json');

  deliveremail = require('./deliveremail');

  server = simplesmtp.createServer();

  server.listen(25);

  console.log();

  console.log('   Pokemon Emails listening on port 25'.cyan);

  console.log();

  display = function(success, conn) {
    var msg;
    msg = "From:  " + conn.from + "\n   To:    " + conn.to;
    if (conn.forwardto != null) {
      msg += "\n   Proxy: " + conn.forwardto;
    }
    if (success) {
      return console.log((" âˆš " + msg).green);
    }
    return console.error((" X " + msg).red);
  };

  server.on('startData', function(conn) {
    var host, to, _i, _len, _ref;
    if (conn.to.length !== 1) {
      return conn.deny = true;
    }
    _ref = conn.to;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      to = _ref[_i];
      host = to.split('@')[1];
      if (!(__indexOf.call(config.hosts, host) >= 0)) {
        return conn.deny = true;
      }
    }
    conn.forwardto = config.forwardto;
    conn.saveStream = new stream.PassThrough();
    return deliveremail(conn.forwardto, conn.from, conn.saveStream, function(err, message) {
      if (err == null) {
        display(true, conn);
      } else {
        display(false, conn);
        console.error(("   Error: " + err).red);
      }
      return conn.cb(err, message);
    });
  });

  server.on('data', function(conn, chunk) {
    if ((conn.deny != null) && conn.deny) {
      return;
    }
    return conn.saveStream.write(chunk);
  });

  server.on('dataReady', function(conn, cb) {
    if ((conn.deny != null) && conn.deny) {
      display(false, conn);
      console.error("   Error: proxy denied".red);
      return cb(new Error('denied'));
    }
    conn.saveStream.end();
    return conn.cb = cb;
  });

}).call(this);
